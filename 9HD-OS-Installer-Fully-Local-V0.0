#!/bin/bash -i

### GENERIC FUNCTIONS, TO BE USED OFTEN ###

# FLEXIBLE TUI USER PROMPT
# accepts one input from terminal after the word "RESPONSE: " and executes the helper function or command passed to it in code (does not accept "" or '')
# syntax for using this is as so: user-prompt "<helper function to call>" "<command on proc>" "<command on fail>"
user-prompt(){
    read -r -t 120 -p "RESPONSE: " Input < /dev/tty
    eval "$1" "$Input" "$2" "$3"
}
# helper function for above that executes $2 on "YES" input and $3 on anything else
up-helper-yes(){
    if [[ "$1" = "YES" ]]; then #execute $2
        eval "$2"
    else #execute $3
        eval "$3"
    fi
}

# ABORTS INSTALL AND EXITS SCRIPT
abort-install (){
    echo -e "===\e[1;31m 9HD-OS INSTALLATION ABORTED\e[0m ==="
    exit
}

### HIGHLY SPECIFIC FUNCTIONS, TO BE USED ONE-FEW TIMES ###

# INITRIAL USER PROMPT & HELPER FUNCTION
initial-user-prompt (){
    read -r -t 120 -p " RESPONSE: " Input < /dev/tty
    initial-user-prompt-responder "$Input"
}
initial-user-prompt-responder (){
    if [[ "$1" != "YES" ]]; then #clear and abort
        clear
        abort-install
    else #start install
        start-install
    fi
}

# STARTS INSTALL PROCESS, PROCEEDS TO "check-efi-mode"
start-install (){
    clear
    echo -e "===\e[1;36m PROCEEDING WITH 9HD-OS INSTALLATION\e[0m ==="
    check-efi-mode
}

# CHECKS THAT THE MACHINE IS BOOTED IN EFI MODE
# prompts user if they want to proceed if not in EFI mode, proceeds to "select-install-disk" if in EFI mode or if user responds with "YES".
check-efi-mode (){
    if [ -d /sys/firmware/efi ]; then
        echo "System is booted in UEFI mode. Proceeding..."
        select-install-disk
    else
        echo -e "\e[1;31mWARNING: YOUR MACHINE IS NOT BOOTED IN EFI MODE. THIS MAY RESULT IN THE SYSTEM FUNCTIONING INCORRECTLY. IT IS HIGHLY RECOMMENDED"
        echo -e "TO ABORT AND REBOOT IN UEFI MODE IF AVAILABLE. DO YOU WISH TO PROCEED ANYWAYS? Type YES to proceed, or anything else to abort...\e[0m"
        user-prompt "up-helper-yes" "select-install-disk" "abort-install"
    fi
}

# PROMPTS USER TO SELECT A DISK FOR INSTALLATION
select-install-disk (){
    clear
    echo "█▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀█"
    echo -e "█\e[1;36m                                DISK SELECTION                                \e[0m█"
    echo "█▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄█"
    echo ""
    echo -e "\e[1;36mSELECT A DISK FROM THE LIST BELOW TO CREATE A BOOT DRIVE FOR 9HD-OS."
    echo -e "\e[1;31mTHE SELECTED DISK WILL BE FORMATTED; ANY DATA ON IT WILL BE PERMANENTLY DELETED. \e[0m"
    echo ""
    lsblk -i -o "NAME,SIZE,TYPE,MODEL" -x "NAME" -Q "type == 'disk' || type == 'part'" --highlight "type == 'disk'"
    echo ""
    read -r -p "DISK NAME: " DiskToFormat < /dev/tty
    select-FDE "$DiskToFormat"
}

# TESTS IF DISK EXISTS, THEN PROMPTS USER TO USE OR TO NOT USE LUKS FDE
select-FDE (){
    clear
    DiskPath="/dev/$1"
    if [[ $DiskPath == "/dev/" ]] || [[ $DiskPath == "/dev/.." ]] || [[ $DiskPath == "/dev/." ]]; then #tests for wildcards to prevent directory transversal. returns to disk select if present (probs not needed, leaving for security)
        echo "█▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀█"
        echo -e "█\e[1;36m                                DISK SELECTION                                \e[0m█"
        echo "█▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄█"
        echo ""
        echo "SELECTED DISK: $1"
        echo ""
        echo -e "\e[1;31mWARNING: THE RESPONSE YOU ENTERED IS NOT A VALID DISK NAME. PRESS ANY KEY TO RESTART DISK SELECTION. \e[0m"
        read -n 1 -s < /dev/tty
        select-install-disk
    elif lsblk -o NAME,TYPE | grep -E "^$(basename $DiskPath)\s+disk$" &>/dev/null; then #checks if the disk exists and is not a partition. proceeds if so
        echo "DISK EXISTS. PROCEEDING..."
    else #returns to select-install-disk if fails disk test
        echo "█▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀█"
        echo -e "█\e[1;36m                                DISK SELECTION                                \e[0m█"
        echo "█▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄█"
        echo ""
        echo "SELECTED DISK: $1"
        echo ""
        echo -e "\e[1;31mWARNING: THE RESPONSE YOU ENTERED IS NOT A VALID DISK NAME. PRESS ANY KEY TO RESTART DISK SELECTION. \e[0m"
        read -n 1 -s < /dev/tty
        select-install-disk
    fi
    clear
    echo "█▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀█"
    echo -e "█\e[1;36m                                DISK SELECTION                                \e[0m█"
    echo "█▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄█"
    echo ""
    echo "SELECTED DISK: $1"
    echo ""
    echo -e "\e[1;36mDO YOU WANT TO USE LUKS1 SHA512 FULL DISK ENCRYPTION? (YES or NO) \e[0m "
    echo "NOTE: FULL DISK ENCRYPTION IS HIGHLY RECOMMENDED."
    echo ""
    read -r -p "RESPONSE: " UseCryptoResponse < /dev/tty
    if [[ "$UseCryptoResponse" == "YES" ]]; then #proceed to crypto enabled partitioner
        crypto-passkey-capture "$1"
    elif [[ "$UseCryptoResponse" == "NO" ]]; then #proceed to crypto disabled partitioner
        non-crypto-partitioner "$1"
    else #return to select-FDE
        select-FDE "$1"
    fi
}

# PROMPTS THE USER TO CREATE A PASSKEY FOR FDE ENABLED INSTALL
crypto-passkey-capture (){
    clear
    echo "█▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀█"
    echo -e "█\e[1;36m                                DISK SELECTION                                \e[0m█"
    echo "█▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄█"
    echo ""
    echo "SELECTED DISK: $1"
    echo ""
    echo -e "\e[1;36mSELECT A PASSKEY FOR YOUR ENCRYPTED CONTAINER. \e[0m "
    echo ""
    read -rs -p "ENTER PASSKEY: " CryptPassKey < /dev/tty #clear this ASAP
    echo ""
    read -rs -p "RENTER PASSKEY: " CryptPassKey2 < /dev/tty #clear this ASAP
    echo ""
    if [[ -n "$CryptPassKey" && -n "$CryptPassKey2" && "$CryptPassKey" == "$CryptPassKey2" ]]; then 
        echo "Passwords match. Proceeding..."
        unset CryptPassKey2 #clear CryptPassKey2 for security
        crypto-partitioner "$1"
    else
        echo ""
        echo -e "\e[1;31mWARNING: PASSKEYS DO NOT MATCH OR ARE EMPTY. PRESS ANY KEY TO RESTART PASSKEY SELECTION. \e[0m"
        read -n 1 -s < /dev/tty
        crypto-passkey-capture "$1"
    fi 
}

# CREATES PARTITIONS FOR FDE ENABLED INSTALL
crypto-partitioner (){
    clear
    echo "█▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀█"
    echo -e "█\e[1;36m                                DISK SELECTION                                \e[0m█"
    echo "█▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄█"
    echo ""
    echo "SELECTED DISK: $1"
    echo ""
    echo -e "\e[1;36mYOU HAVE SELECTED TO USE LUKS1 SHA512 FDE, AND TO USE THE LISTED DISK AS YOUR PRIMARY DRIVE. DO YOU WISH TO CONTINUE? (YES or NO)"
    echo -e "\e[1;31mWARNING: THE SELECTED DISK WILL BE FORMATTED; ANY DATA ON IT WILL BE PERMANENTLY DELETED. \e[0m "
    echo ""
    read -r -p "RESPONSE: " StartPartitioner < /dev/tty
    if [[ "$StartPartitioner" == "NO" ]]; then #return to disk selector
        select-install-disk
    elif [[ "$StartPartitioner" == "YES" ]]; then #format selected drive
        clear
        echo "Beginning installation..."
        timedatectl set-ntp true
        DiskPath="/dev/$1"
        DiskSize=$(blockdev --getsize64 "$DiskPath")
        DiskSizeKB=$((DiskSize / 1024))
        SectorSize=$(blockdev --getpbsz "$DiskPath") #set sector size to physical sector size
        SectorsPerKB=$((1024 / SectorSize))
        BiosSizeKB=1024 #1 MiB
        EfiSizeKB=563200 #550 MiB
        BiosStart=2048
        BiosEnd=$((BiosStart + BiosSizeKB * SectorsPerKB - 1))
        EfiStart=$((BiosEnd + 1))
        EfiEnd=$((EfiStart + EfiSizeKB * SectorsPerKB - 1))
        LuksStart=$((EfiEnd + 1))
        LuksEnd=$(sgdisk -E "DiskPath")
        if [[ "$1" == nvme* ]]; then
            BiosPartPath="/dev/${1}p1"
            EfiPartPath="/dev/${1}p2"
            LuksPartPath="/dev/${1}p3"
        else
            BiosPartPath="/dev/${1}1"
            EfiPartPath="/dev/${1}2"
            LuksPartPath="/dev/${1}3"
        fi
        for MountPointToErase in /mnt/*; do #unmount everything under /mnt/
            if mountpoint -q "$MountPointToErase"; then
                echo "Unmounting $MountPointToErase..."
                umount -lf "$MountPointToErase"
            fi
        done
        for MountPointToErase in /mnt*; do #unmount all root mnt points (/mnt, /mnt2, etc)
            if mountpoint -q "$MountPointToErase"; then
                echo "Unmounting $MountPointToErase..."
                umount -lf "$MountPointToErase"
            fi
        done
        partprobe "$DiskPath" #refresh part table
        swapoff -a #disable all existing swap files
        ls /dev/mapper | grep -v '^control$' | while read MappedDevI; do 
            VolGroupName=$(pvs --noheadings -o vg_name "/dev/mapper/${MappedDevI}" 2>/dev/null | awk '{print $1}') #find any physical volumes
            if [[ -n "$VolGroupName" ]]; then #close them
                echo "Deactivating volume group $VolGroupName"
                vgchange -an "$VolGroupName"
            fi
            fuser -km "/dev/mapper/${MappedDevI}" 2>/dev/null
            umount -lf "/dev/mapper/${MappedDevI}" 2>/dev/null
            cryptsetup close "${MappedDevI}"
        done 
        wipefs --all --force "$DiskPath" #wipe all partitions
        sgdisk --zap-all "$DiskPath" #wipe out part table
        dd if=/dev/zero of="$DiskPath" bs=1M count=20 status=progress #erase first 20mb of disk (to kill headers)
        dd if=/dev/zero of="$DiskPath" bs=1M count=10 seek=$(( $(blockdev --getsize64 "$DiskPath") / 1024 / 1024 - 10 )) status=progress #erase last 10mb of disk (to kill GPT backup and footers)
        partprobe "$DiskPath" #refresh part table
        sgdisk -n 1:${BiosStart}:${BiosEnd} -t 1:EF02 -c 1:"BIOS boot partition" "${DiskPath}" #create BIOS boot part for compatibility
        sgdisk -n 2:${EfiStart}:${EfiEnd} -t 2:EF00 -c 2:"EFI System" "${DiskPath}" #create EFI part
        sgdisk -n 3:${LuksStart}:${LuksEnd} -t 3:8309 -c 3:"Linux LUKS" "${DiskPath}" #create LUKS part
        partprobe "$DiskPath" #refresh part table
        echo -n "$CryptPassKey" | cryptsetup luksFormat --type luks1 --use-random -S 1 -s "${SectorSize}" -h sha512 -i 5000 "${LuksPartPath}" --batch-mode --key-file=- #create LUKS container
        echo -n "$CryptPassKey" | cryptsetup open "${LuksPartPath}" cryptlvm --key-file=- #open the LUKS container
        unset CryptPassKey #clear CryptPassKey for security
        partprobe "$DiskPath" #refresh part table
        pvcreate /dev/mapper/cryptlvm
        vgcreate vg /dev/mapper/cryptlvm
        lvcreate -L 4G vg -n swap 
        lvcreate -L 8G vg -n root 
        lvcreate -l 100%FREE vg -n home 
        partprobe "$DiskPath" #refresh part table
        mkfs.ext4 /dev/vg/root #format home root as ext4
        mkfs.ext4 /dev/vg/home #format home dir as ext4
        mkswap /dev/vg/swap #make swap file
        mount /dev/vg/root /mnt/ #mount root dir
        mkdir /mnt/home #make home dir mount point
        mount /dev/vg/home /mnt/home #mount home dir
        swapon /dev/vg/swap #enable SWAP
        mkfs.fat -F32 $EfiPartPath
        mkdir /mnt/efi
        mount $EfiPartPath /mnt/efi
        echo "End of section reached. Aborting..."
        abort-install
    else
        crypto-partitioner "$1"
    fi
}

# CREATES PARTITIONS FOR FDE DISABLED INSTALL
non-crypto-partitioner (){
    clear
    echo "█▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀█"
    echo -e "█\e[1;36m                                DISK SELECTION                                \e[0m█"
    echo "█▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄█"
    echo ""
    echo "SELECTED DISK: $1"
    echo ""
    echo -e "\e[1;36mYOU HAVE SELECTED TO NOT USE FDE, AND TO USE THE LISTED DISK AS YOUR PRIMARY DRIVE. DO YOU WISH TO CONTINUE? (YES or NO)"
    echo -e "\e[1;31mWARNING: THE SELECTED DISK WILL BE FORMATTED; ANY DATA ON IT WILL BE PERMANENTLY DELETED. \e[0m "
    echo ""
    read -r -p "RESPONSE: " StartPartitioner < /dev/tty
    if [[ "$StartPartitioner" == "NO" ]]; then #return to disk selector
        select-install-disk
    elif [[ "$StartPartitioner" == "YES" ]]; then #format selected drive
        clear
        echo "Beginning installation..." # PUT NON-CRYPTO PARTITIONING CODE HERE
        abort-install
    else
        non-crypto-partitioner $1
    fi
}

# ASCII ART
startup-ascii (){
clear
echo -e "\e[0;36m"
echo "                                :-            %     %            -                                "
echo "                              -@%%@*  ::    = @:    @::    :: :#@*@#:                             "
echo "                           #@@@@@@@@*=      =+@@=+-@@*+      =#@@@@@@@@+                          "
echo "                         -#%=-%@@@@@@@@*:   :*@@@@@@@+    :*@@@@@@@@#-+@*:                        "
echo "                     #%%@@@@@@@@@@@#%@@@@#  #@@*@@@%%%%  *@@@@%@@@@@@@@@@@@%%+                    "
echo "                     %@%%#+: =@@@%-:+@@@@@# :%@*@@@*@@  @@@@@@*:+@@@@: -*#%@@#                    "
echo "                           =@@*##=    *@@@@+  %@@@@@#  *@@@@+   :*%##@@:                          "
echo "                 + :    =%@*           +@@@@   %@@@@  :@@@@*          :#@%-     +                 "
echo "              :#+@=*#                  :@@@@    =@=   :@@@@                 =* +# +               "
echo "             :@@@@@#%@@@@@@#=          =@@@*   %%*%@   #@@@+           :=+****%@@@@#              "
echo "            @@@@@@@@@#@@@@@@@@%        @@@@-   %@@@@   +@@@%        =@@@@@@@@@@@@@@@@-            "
echo "           =%-*@@@@@+*+++*@@@@@@+     #@@@*    %@@@@    %@@@+     -@@@@@@@@@@#@@@@@*#@*           "
echo "          +@@@@@@@@#:       #@@@@+   =@@@@     %@@@@     @@@@:   *@@@@@=     -@@@@@@@@@:          "
echo "       :*%@@@+ =@@#-         =@@@@   @@@@:    -@@@@@+    =@@@@: -@@@@=       -#@@@-=@@@@=         "
echo "       -@@#-  :@+            :%@@@= @@@@=    +@@@@@@@+    *@@@# *@@@#           :%%: =%@@@*       "
echo "            :#@=             :%@@@=+@@@#  -%@@@@@*@@@@@%:  %@@@-+@@@#             ##   -*#        "
echo "          :   :              -@@@@-@@@#: @@@%#       #@@@@  #@@@=@@@@:                 :          "
echo "          *-:#  -+***+:      -@@@%-@@@=-@@@%           #@@@-+@@@+%@@@=      :=+*+:  -+ *:         "
echo "        #=@#@*@@@@@@@@@@@+   +@@@#-@@@+:@@@@:    .    -@@@@:*@@@=#@@@*   +@@@@@@@@@@@#@*%-=       "
echo "       -@@@@@@@@@@@@@@@@@@@= *@@@*:@@@@ *@@@@#  -%-  *@@@@+:%@@@ *@@@# +@@@@@@@@@@@@@@@@@@#       "
echo "       #@@@@@@@*+     :#@@@@-*@@@* *@@@# -@@*:=@@@@@--#@@= #@@@+ *@@@#+@@@@#:    +##@@@@@@%-      "
echo "      @@=*@@@@%:        *@@@#=@@@%  @@@@%  :@@@@@@@@@@#  :%@@@#  #@@@*%@@@=        +@@@@@=@@=     "
echo "      =@@@@%@@@-        -@@@@-@@@@:  *@@@@#-=#@%+-*@@@@@#-#@@*  :@@@@-@@@@        :#@@@@@@#@:     "
echo "     :@@@# +@-          -@@@@ #@@@%   :@@@@@@@=    ::#@@@@=::   %@@@#:@@@@          :%@ =@@@*     "
echo "    +#@@+  %*           -@@@@ -@@@@#   +:+@@@@@@@@@@@*:%@@@+   #@@@%::@@@@:          =@- =@@@=    "
echo "    %@@:  -@+           :@@@@  :@@@@@+-@@@= =#@@@@@@@#::@@@@-+@@@@@- :@@@@            @*   %@@=   "
echo "          ::             #@@@+   #@@@@@@@@+ =@#::@@@@@= *@@@@@@@@*   +@@@@            :+-   :     "
echo "                         +@@@@-   :*@@@@@@=+@@@%: -@@@@+=@@@@@@*    :@@@@=                        "
echo "                          %@@@@:      -@* #@@@@     @@@@# #@-      =@@@@#                         "
echo "                           *@@@@@*=: :=*%@@@@#      :%@@@@%+-: :=#@@@@@*                          "
echo "                            :%@@@@@@@@@@@@@%-        :-@@@@@@@@@@@@@@%:                           "
echo "                               -#@@@@@@@*-:*@@%:    %@@*:-#@@@@@@@*-                              "
echo "                                           +@@@@%-#@@@@=                                          "
echo "                                             =@@@@@@@=                                            "
echo "                                                #@#                                               "
echo "                                               @+ +@                                              "
echo "                                               @. .@                                              "
echo "                                                +%=                                               "
echo "                                                 @                                                "
echo -e "                                                 '\e[1;36m                                                "
echo "  __        _______ _     ____ ___  __  __ _____   _____ ___     ___  _   _ ____     ___  ____    "
echo "  \ \      / / ____| |   / ___/ _ \|  \/  | ____| |_   _/ _ \   / _ \| | | |  _ \   / _ \/ ___|   "
echo "   \ \ /\ / /|  _| | |  | |  | | | | |\/| |  _|     | || | | | | (_) | |_| | | | | | | | \___ \   "
echo "    \ V  V / | |___| |__| |__| |_| | |  | | |___    | || |_| |  \__, |  _  | |_| | | |_| |___) |  "
echo "     \_/\_/  |_____|_____\____\___/|_|  |_|_____|   |_| \___/     /_/|_| |_|____/   \___/|____/   "
echo ""
echo -e "\e[1;31m ARE YOU SURE YOU WANT TO PROCEED WITH INSTALLATION? THIS WILL CAUSE LARGE CHANGES TO YOUR SYSTEM." 
echo -e " AN INTERNET CONNECTION IS REQUIRED. Type YES to contiue, or anything else to abort...\e[0m "
}

### INITIAL CLS EXECUTIONS
startup-ascii
initial-user-prompt